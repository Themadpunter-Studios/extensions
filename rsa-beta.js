(function(Scratch) {
    'use strict';

    // Load the JSEncrypt library from a CDN
    const script = document.createElement('script');
    script.src = 'data:text/plain;base64,';
    document.head.appendChild(script);

    const script2 = document.createElement('script');
    script2.src = 'data:text/plain;base64,IWZ1bmN0aW9uKHIpe3ZhciB0PUNyeXB0b0pTLGU9dC5saWIsbj1lLldvcmRBcnJheSxvPWUuSGFzaGVyLHM9dC5hbGdvLGE9W10saT1bXTshZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe2Zvcih2YXIgZT1yLnNxcnQodCksbj0yO248PWU7bisrKWlmKCEodCVuKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBlKHIpe3JldHVybiA0Mjk0OTY3Mjk2KihyLSgwfHIpKXwwfWZvcih2YXIgbj0yLG89MDtvPDY0Oyl0KG4pJiYobzw4JiYoYVtvXT1lKHIucG93KG4sLjUpKSksaVtvXT1lKHIucG93KG4sMS8zKSksbysrKSxuKyt9KCk7dmFyIGg9W10sYz1zLlNIQTI1Nj1vLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBuLmluaXQoYS5zbGljZSgwKSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihyLHQpe2Zvcih2YXIgZT10aGlzLl9oYXNoLndvcmRzLG49ZVswXSxvPWVbMV0scz1lWzJdLGE9ZVszXSxjPWVbNF0sbD1lWzVdLGY9ZVs2XSx1PWVbN10sXz0wO188NjQ7XysrKXtpZihfPDE2KWhbX109MHxyW3QrX107ZWxzZXt2YXIgdj1oW18tMTVdLGQ9KHY8PDI1fHY+Pj43KV4odjw8MTR8dj4+PjE4KV52Pj4+MyxIPWhbXy0yXSxwPShIPDwxNXxIPj4+MTcpXihIPDwxM3xIPj4+MTkpXkg+Pj4xMDtoW19dPWQraFtfLTddK3AraFtfLTE2XX12YXIgdz1uJm9ebiZzXm8mcyx5PShuPDwzMHxuPj4+MileKG48PDE5fG4+Pj4xMyleKG48PDEwfG4+Pj4yMiksZz11KygoYzw8MjZ8Yz4+PjYpXihjPDwyMXxjPj4+MTEpXihjPDw3fGM+Pj4yNSkpKyhjJmxefmMmZikraVtfXStoW19dO3U9ZixmPWwsbD1jLGM9YStnfDAsYT1zLHM9byxvPW4sbj1nKyh5K3cpfDB9ZVswXT1lWzBdK258MCxlWzFdPWVbMV0rb3wwLGVbMl09ZVsyXStzfDAsZVszXT1lWzNdK2F8MCxlWzRdPWVbNF0rY3wwLGVbNV09ZVs1XStsfDAsZVs2XT1lWzZdK2Z8MCxlWzddPWVbN10rdXwwfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2RhdGEsZT10LndvcmRzLG49OCp0aGlzLl9uRGF0YUJ5dGVzLG89OCp0LnNpZ0J5dGVzO3JldHVybiBlW28+Pj41XXw9MTI4PDwyNC1vJTMyLGVbMTQrKG8rNjQ+Pj45PDw0KV09ci5mbG9vcihuLzQyOTQ5NjcyOTYpLGVbMTUrKG8rNjQ+Pj45PDw0KV09bix0LnNpZ0J5dGVzPTQqZS5sZW5ndGgsdGhpcy5fcHJvY2VzcygpLHRoaXMuX2hhc2h9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIHI9by5jbG9uZS5jYWxsKHRoaXMpO3JldHVybiByLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKSxyfX0pO3QuU0hBMjU2PW8uX2NyZWF0ZUhlbHBlcihjKSx0LkhtYWNTSEEyNTY9by5fY3JlYXRlSG1hY0hlbHBlcihjKX0oTWF0aCk7';
    document.head.appendChild(script2);

    class RSAExtension {
        getInfo() {
            return {
                id: 'rsa',
                name: 'RSA',
                color1: '#FF0000', // Primary color (red)
                color2: '#CC0000', // Secondary color (darker red)
                blocks: [
                    {
                        opcode: 'generateKeys',
                        blockType: Scratch.BlockType.REPORTER,
                        text: 'Generate RSA Keys',
                        arguments: {}
                    },
                    {
                        opcode: 'encrypt',
                        blockType: Scratch.BlockType.REPORTER,
                        text: 'Encrypt [TEXT] with public key [KEY]',
                        arguments: {
                            TEXT: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: 'Hello, world!'
                            },
                            KEY: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: ''
                            }
                        }
                    },
                    {
                        opcode: 'decrypt',
                        blockType: Scratch.BlockType.REPORTER,
                        text: 'Decrypt [TEXT] with private key [KEY]',
                        arguments: {
                            TEXT: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: ''
                            },
                            KEY: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: ''
                            }
                        }
                    },
                    {
                        opcode: 'sign',
                        blockType: Scratch.BlockType.REPORTER,
                        text: 'Sign [TEXT] with private key [KEY]',
                        arguments: {
                            TEXT: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: ''
                            },
                            KEY: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: ''
                            }
                        }
                    },
                    {
                        opcode: 'verify',
                        blockType: Scratch.BlockType.BOOLEAN,
                        text: 'Verify [SIGNATURE] with [TEXT] and public key [KEY]',
                        arguments: {
                            TEXT: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: ''
                            },
                            SIGNATURE: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: ''
                            },
                            KEY: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: ''
                            }
                        }
                    }
                ]
            };
        }

        generateKeys() {
            const crypt = new JSEncrypt({ default_key_size: 1024 });
            const publicKey = crypt.getPublicKeyB64();
            const privateKey = crypt.getPrivateKeyB64();
            return JSON.stringify({ publicKey, privateKey });
        }

        encrypt(args) {
            const crypt = new JSEncrypt();
            crypt.setPublicKey(args.KEY);
            const encrypted = crypt.encrypt(args.TEXT);
            return encrypted ? btoa(encrypted) : 'Encryption failed';
        }

        decrypt(args) {
            const crypt = new JSEncrypt();
            crypt.setPrivateKey(args.KEY);
            const decrypted = crypt.decrypt(atob(args.TEXT));
            return decrypted ? decrypted : 'Decryption failed';
        }
        sign(args) {
            var sign = new JSEncrypt();
            sign.setPrivateKey(args.KEY);
            var signature = sign.sign(args.TEXT, SHA256, "sha256");
            return signature ? signature : "Signing failed";
        }
        verify(args) {
            var verify = new JSEncrypt();
            verify.setPublicKey(args.KEY);
            var verified = verify.verify(args.TEXT, args.SIGNATURE, SHA256);
            return verified ? verified : "Verification failed";
        }
    }

    // Wait for the script to load before registering the extension
    script.onload = () => {
        Scratch.extensions.register(new RSAExtension());
    };
})(Scratch);
